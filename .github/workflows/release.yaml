name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: generate-version
        run: |
          # Get current date and format it as YYYY.MM
          CURRENT_DATE=$(date +%Y.%m)
          # Get latest tag and extract release number
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "v0.0.0")
          LATEST_RELEASE_NUMBER=$(echo "$LATEST_TAG" | cut -d '.' -f 3 | cut -d 'v' -f 2)
          # Increment release number if same month, otherwise reset to 0
          if [[ "$(date +%Y.%m)" == "$(echo "$LATEST_TAG" | cut -d '.' -f 1,2 | cut -d 'v' -f 2)" ]]; then
            RELEASE_NUMBER=$((LATEST_RELEASE_NUMBER + 1))
          else
            RELEASE_NUMBER=0
          fi
          # Set VERSION environment variable
          VERSION="v$CURRENT_DATE.$RELEASE_NUMBER"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          # Update Chart.yaml with new version
          sed -i "s/^version:.*$/version: ${VERSION#v}/" charts/batbelt/Chart.yaml
          sed -i "s/^appVersion:.*$/appVersion: \"${VERSION#v}\"/" charts/batbelt/Chart.yaml

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Packages and plugins to install
        id: file-content
        run: |
          PACKAGES="$(cat env/prod/packagelist.txt|xargs)"
          KREWPLUGINS="$(cat env/prod/krewplugins.txt|xargs)"
          PLATFORMS="$(cat env/prod/platforms.txt|xargs|sed -e 's/ /,/g')"
          echo "packages=${PACKAGES}" >> $GITHUB_OUTPUT
          echo "krewplugins=${KREWPLUGINS}" >> $GITHUB_OUTPUT
          echo "platforms=${PLATFORMS}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.VERSION }}
            ghcr.io/${{ github.repository }}:latest
          platforms: ${{ steps.file-content.outputs.platforms }}
          build-args: |
            PACKAGES=${{ steps.file-content.outputs.packages }}
            KREWPLUGINS=${{ steps.file-content.outputs.krewplugins }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
            type=registry,ref=ghcr.io/${{ github.repository }}:latest
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max

      - name: Generate Package Report
        id: package-report
        run: |
          # Funzione per mostrare il progresso
          progress() {
            local duration=$1
            local platform=$2
            local sleep_time=5  # Aggiorna ogni 5 secondi
            local elapsed=0

            while [ $elapsed -lt $duration ]; do
              echo "‚è≥ Checking packages for $platform... $(($elapsed))s elapsed"
              sleep $sleep_time
              elapsed=$((elapsed + sleep_time))
            done
          }

          # Funzione per controllare pacchetti in parallelo
          check_packages_parallel() {
            local platform=$1
            local output_file="platform_${platform//\//_}.txt"

            echo "üöÄ Starting checks for platform: $platform"

            # Avvia il contatore di progresso in background
            progress 300 $platform &
            local progress_pid=$!

            # Check Alpine packages
            echo "üì¶ Checking Alpine packages for $platform..."
            for pkg in $(cat env/prod/packagelist.txt); do
              version=$(docker run --rm --platform linux/$platform ghcr.io/${{ github.repository }}:${{ env.VERSION }} apk info -v $pkg 2>/dev/null || echo "not installed")
              echo "${pkg}|${version}" >> "$output_file"
            done

            # Check binaries
            echo "üîß Checking binaries for $platform..."
            for binary in ctop calicoctl termshark oc kubectl; do
              version=$(docker run --rm --platform linux/$platform ghcr.io/${{ github.repository }}:${{ env.VERSION }} $binary --version 2>/dev/null || echo "not installed")
              echo "${binary}|${version}" >> "binary_${output_file}"
            done

            # Check krew plugins
            echo "üîå Checking krew plugins for $platform..."
            for plugin in $(cat env/prod/krewplugins.txt); do
              installed=$(docker run --rm --platform linux/$platform ghcr.io/${{ github.repository }}:${{ env.VERSION }} kubectl krew list 2>/dev/null | grep -q "^$plugin\$" && echo "installed" || echo "not installed")
              echo "${plugin}|${installed}" >> "krew_${output_file}"
            done

            # Termina il contatore di progresso
            kill $progress_pid 2>/dev/null
            echo "‚úÖ Completed checks for platform: $platform"
          }

          echo "üèÅ Starting package verification process..."

          # Esegui i check in parallelo per tutte le piattaforme
          for platform in amd64 arm64 "arm/v8" "arm/v7" "arm/v6"; do
            check_packages_parallel "$platform" &
          done

          # Aspetta che tutti i check siano completati
          wait

          echo "üìù Generating final report..."

          # Genera il report finale
          {
            echo "# üì¶ Batbelt Packages"
            echo ""
            echo "Last updated: $(date '+%Y-%m-%d %H:%M:%S %Z')"
            echo ""

            # Alpine Packages
            echo "## Alpine Packages"
            echo "| Package | Version | amd64 | arm64 | arm/v8 | arm/v7 | arm/v6 |"
            echo "|---------|----------|-------|--------|---------|---------|---------|"

            # Genera la tabella dei pacchetti
            while read -r pkg; do
              echo -n "| $pkg |"
              # Prendi la versione da amd64 come riferimento
              version=$(grep "^${pkg}|" platform_amd64.txt | cut -d'|' -f2)
              echo -n " $version |"

              for platform in amd64 arm64 arm_v8 arm_v7 arm_v6; do
                if grep -q "^${pkg}|" platform_${platform}.txt; then
                  echo -n " ‚úÖ |"
                else
                  echo -n " ‚ùå |"
                fi
              done
              echo ""
            done < <(cat env/prod/packagelist.txt) >> PACKAGES.md

            # ... resto del codice per generare le altre tabelle ...

          } | tee PACKAGES.md > package_report.md

          echo "üéâ Package report generation completed!"

      - name: Update Documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add PACKAGES.md
          git commit -m "docs: update packages list for version ${{ env.VERSION }}" || echo "No changes to commit"
          git push

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body_path: package_report.md